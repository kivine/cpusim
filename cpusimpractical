<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="cpusimpractical" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="ADDR12" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field75da36fb">
	</Field>
	<Field name="OP4" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field2e794b31">
	</Field>
	<Field name="OP16" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Field692e032a">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register4de79d1a" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register587564e7" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register3c319c1b" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register259fefe4" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register54e1a900" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register27c0ad27" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register17213c80" />
	<Register name="TR" width="16" initialValue="0" readOnly="false" id="model.module.Register4d1b114f" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="E" bit="0" register="model.module.Register259fefe4" halt="false" id="model.module.ConditionBit14eb0845" />
	<ConditionBit name="S" bit="0" register="model.module.Register17213c80" halt="true" id="model.module.ConditionBit3660266a" />

	<!--............. rams ..........................-->
	<RAM name="M" length="4096" cellSize="16" id="model.module.RAM3fed0ead" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="model.module.Register4de79d1a" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet7a6878" />
	<Set name="E&lt;-0" register="model.module.Register259fefe4" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet48991287" />
	<Set name="S&lt;-1" register="model.module.Register17213c80" start="0" numBits="1" value="1" id="model.microinstruction.CpusimSete8afd15" />

	<!--............. test ..........................-->
	<Test name="IF AC=0, THEN SKIP" register="model.module.Register4de79d1a" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test779d8dd6" />
	<Test name="IF AC[15]=0, THEN SKIP" register="model.module.Register4de79d1a" start="15" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test2334be4" />
	<Test name="IF AC[15]=1, THEN SKIP" register="model.module.Register4de79d1a" start="15" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test70834455" />
	<Test name="IF DR=0, THEN SKIP" register="model.module.Register3c319c1b" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test6b443928" />
	<Test name="IF E=0,THEN SKIP" register="model.module.Register259fefe4" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test702cfaab" />

	<!--............. increment .....................-->
	<Increment name="AC&lt;-AC+1" register="model.module.Register4de79d1a" delta="1" id="model.microinstruction.Increment213b393" />
	<Increment name="AR&lt;-AR+1" register="model.module.Register587564e7" delta="1" id="model.microinstruction.Increment48d44780" />
	<Increment name="DR&lt;-DR+1" register="model.module.Register3c319c1b" delta="1" id="model.microinstruction.Increment5fba1593" />
	<Increment name="PC&lt;-PC+1" register="model.module.Register27c0ad27" delta="1" id="model.microinstruction.Increment70d4a4ae" />

	<!--............. shift .........................-->
	<Shift name="AC&lt;-SHL AC" type="logical" source="model.module.Register4de79d1a" destination="model.module.Register4de79d1a" direction="left" distance="1" id="model.microinstruction.Shift5f7b03b4" />
	<Shift name="AC&lt;-SHR AC" type="logical" source="model.module.Register4de79d1a" destination="model.module.Register4de79d1a" direction="right" distance="1" id="model.microinstruction.Shift10005229" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;-AC'" type="NOT" source1="model.module.Register4de79d1a" source2="model.module.Register4de79d1a" destination="model.module.Register4de79d1a" id="model.microinstruction.Logical46e5f5ee" />
	<Logical name="AC&lt;-AC^DR" type="AND" source1="model.module.Register4de79d1a" source2="model.module.Register3c319c1b" destination="model.module.Register4de79d1a" id="model.microinstruction.Logical5cf1d0bf" />
	<Logical name="E&lt;-E'" type="NOT" source1="model.module.Register259fefe4" source2="model.module.Register259fefe4" destination="model.module.Register259fefe4" id="model.microinstruction.Logical32c10e8c" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-AC+DR" type="ADD" source1="model.module.Register4de79d1a" source2="model.module.Register3c319c1b" destination="model.module.Register4de79d1a" carryBit="model.module.ConditionBit14eb0845" id="model.microinstruction.Arithmetic3c41f53e" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC&lt;-DR" source="model.module.Register3c319c1b" srcStartBit="0" dest="model.module.Register4de79d1a" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR23129031" />
	<TransferRtoR name="AC[0]&lt;-E" source="model.module.Register259fefe4" srcStartBit="0" dest="model.module.Register4de79d1a" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR705724c4" />
	<TransferRtoR name="AC[15]&lt;-E" source="model.module.Register259fefe4" srcStartBit="0" dest="model.module.Register4de79d1a" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR67688241" />
	<TransferRtoR name="AR&lt;-IR(0-11)" source="model.module.Register54e1a900" srcStartBit="0" dest="model.module.Register587564e7" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR3c8248c8" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Register27c0ad27" srcStartBit="0" dest="model.module.Register587564e7" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoRb26d471" />
	<TransferRtoR name="E&lt;-AC[0]" source="model.module.Register4de79d1a" srcStartBit="0" dest="model.module.Register259fefe4" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR421eb0d5" />
	<TransferRtoR name="E&lt;-AC[15]" source="model.module.Register4de79d1a" srcStartBit="15" dest="model.module.Register259fefe4" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR61c7585d" />
	<TransferRtoR name="PC&lt;-AR" source="model.module.Register587564e7" srcStartBit="0" dest="model.module.Register27c0ad27" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR4fad98a5" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE IR" ir="model.module.Register54e1a900" id="model.microinstruction.Decode3dafb071" />

	<!--............. set condition bit .............-->
	<!-- none -->

	<!--............. io ............................-->
	<IO name="INP" direction="input" type="integer" buffer="model.module.Register4de79d1a" connection="[Console]" id="model.microinstruction.IObd707e3" />
	<IO name="OUT" direction="output" type="integer" buffer="model.module.Register4de79d1a" connection="[Console]" id="model.microinstruction.IO64912699" />

	<!--............. memory access .................-->
	<!-- none -->

	<!--............. end ...........................-->
	<End id="model.microinstruction.End6b05d652" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoRb26d471" />
		<Microinstruction microRef="model.microinstruction.Increment70d4a4ae" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR3c8248c8" />
		<Microinstruction microRef="model.microinstruction.Decode3dafb071" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="ISZ_I" opcode="e" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#85f3e3 #a7f0a6" assemblyColors="#85f3e3 #a7f0a6" >
		<Microinstruction microRef="model.microinstruction.Increment5fba1593" />
		<Microinstruction microRef="model.microinstruction.Test6b443928" />
		<Microinstruction microRef="model.microinstruction.Increment70d4a4ae" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="BSA_I" opcode="d" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#ba8d9b #c58b83" assemblyColors="#ba8d9b #c58b83" >
		<Microinstruction microRef="model.microinstruction.Increment48d44780" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR4fad98a5" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="BUN_I" opcode="c" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#f593c2 #81dac9" assemblyColors="#f593c2 #81dac9" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR4fad98a5" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="STA_I" opcode="b" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#d3f2be #a8f1a9" assemblyColors="#d3f2be #a8f1a9" >
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="LDA_I" opcode="a" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#e59bda #b5dbf8" assemblyColors="#e59bda #b5dbf8" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR23129031" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="ADD_I" opcode="9" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#a2afe0 #f6a1ae" assemblyColors="#a2afe0 #f6a1ae" >
		<Microinstruction microRef="model.microinstruction.Arithmetic3c41f53e" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="AND_I" opcode="8" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#e7ecf4 #c9d0d6" assemblyColors="#e7ecf4 #c9d0d6" >
		<Microinstruction microRef="model.microinstruction.Logical5cf1d0bf" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="6" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#f7eef9 #abc2a8" assemblyColors="#f7eef9 #abc2a8" >
		<Microinstruction microRef="model.microinstruction.Increment5fba1593" />
		<Microinstruction microRef="model.microinstruction.Test6b443928" />
		<Microinstruction microRef="model.microinstruction.Increment70d4a4ae" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="BSA" opcode="5" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#cf958d #f2cad4" assemblyColors="#cf958d #f2cad4" >
		<Microinstruction microRef="model.microinstruction.Increment48d44780" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR4fad98a5" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="4" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#fe819f #f881e1" assemblyColors="#fe819f #f881e1" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR4fad98a5" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="3" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#a6dbea #8687bc" assemblyColors="#a6dbea #8687bc" >
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="2" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#bda9e1 #f0c48f" assemblyColors="#bda9e1 #f0c48f" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR23129031" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="1" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#cda3c3 #d3ddb5" assemblyColors="#cda3c3 #d3ddb5" >
		<Microinstruction microRef="model.microinstruction.Arithmetic3c41f53e" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" instructionFormat="OP4 ADDR12" assemblyFormat="OP4 ADDR12" instructionColors="#93a2de #94d4d1" assemblyColors="#93a2de #94d4d1" >
		<Microinstruction microRef="model.microinstruction.Logical5cf1d0bf" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#85a6a6" assemblyColors="#85a6a6" >
		<Microinstruction microRef="model.microinstruction.IO64912699" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#c7ce86" assemblyColors="#c7ce86" >
		<Microinstruction microRef="model.microinstruction.IObd707e3" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="7001" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#fddef0" assemblyColors="#fddef0" >
		<Microinstruction microRef="model.microinstruction.CpusimSete8afd15" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="7002" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#cfa2f4" assemblyColors="#cfa2f4" >
		<Microinstruction microRef="model.microinstruction.Test702cfaab" />
		<Microinstruction microRef="model.microinstruction.Increment70d4a4ae" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="7004" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#d39dc0" assemblyColors="#d39dc0" >
		<Microinstruction microRef="model.microinstruction.Test779d8dd6" />
		<Microinstruction microRef="model.microinstruction.Increment70d4a4ae" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="7008" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#8d81f1" assemblyColors="#8d81f1" >
		<Microinstruction microRef="model.microinstruction.Test70834455" />
		<Microinstruction microRef="model.microinstruction.Increment70d4a4ae" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="7010" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#a3cc95" assemblyColors="#a3cc95" >
		<Microinstruction microRef="model.microinstruction.Test2334be4" />
		<Microinstruction microRef="model.microinstruction.Increment70d4a4ae" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="7020" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#c9a9a3" assemblyColors="#c9a9a3" >
		<Microinstruction microRef="model.microinstruction.Increment213b393" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="7040" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#c5fdbc" assemblyColors="#c5fdbc" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR61c7585d" />
		<Microinstruction microRef="model.microinstruction.Shift5f7b03b4" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR705724c4" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="7080" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#ada6e5" assemblyColors="#ada6e5" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR421eb0d5" />
		<Microinstruction microRef="model.microinstruction.Shift10005229" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR67688241" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="7100" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#91bfc9" assemblyColors="#91bfc9" >
		<Microinstruction microRef="model.microinstruction.Logical32c10e8c" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="7200" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#bdf0d6" assemblyColors="#bdf0d6" >
		<Microinstruction microRef="model.microinstruction.Logical46e5f5ee" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="7400" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#f0eae7" assemblyColors="#f0eae7" >
		<Microinstruction microRef="model.microinstruction.CpusimSet48991287" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="7800" instructionFormat="OP16" assemblyFormat="OP16" instructionColors="#f1a8f4" assemblyColors="#f1a8f4" >
		<Microinstruction microRef="model.microinstruction.CpusimSet7a6878" />
		<Microinstruction microRef="model.microinstruction.End6b05d652" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM3fed0ead" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->

</Machine>
